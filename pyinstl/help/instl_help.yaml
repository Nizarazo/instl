command:
    copy:
      short: Create batch file containing instructions to copy files to their destination.
      long: |
            Usage: instl copy --in instl_config_yaml_file --out copy.sh [--run]
            instl's copy command will create a batch file containing instructions to copy files to their designated loactions on disk. Said files were previously downloaded using the sync command. Defintion of what to copy to which destination is taken from the instl_config_yaml_file.
            Keep in mind that copy command does not actaully copy anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully install the files.

    sync:
      short: Create batch file containing instructions to download files.
      long: |
            Usage: instl sync --in instl_config_yaml_file --out sync.sh [--run]
            instl's sync command will create a bacth file containing instructions to download required files. Said files can be later copied to their final destination using instl copy command. Defintion of what to sync from what url is taken from the instl_config_yaml_file.
            Keep in mind that sync command does not actaully download anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully download the files.

    synccopy:
        short: Create batch file containing instructions to download files and these files to their destination.
        long: |
            Usage: instl synccopy --in instl_config_yaml_file --out synccopy.sh [--run]
            instl's synccopy combines the actions of the sync and copy cammands. The created batch file will download the required files and copy them to the designated locations on disk. Defintion of what to sync from what url and what to copy to which destination is taken from the instl_config_yaml_file
            Keep in mind that synccopy command does not actaully download or copy anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully download and install the files.

    trans:
        short: Translates between the various format of svn info files.
        long:  |
            Usage instl trans --in svn_info_file [--props svn_props_file] [--filter-out path_to_filter_out [, path_to_filter_out] ] [--filter-in version_to_filter_in]
            instl's strans command can translate between the format created by svn info command and the native instl info format. Additional input that can be given is the output of the svn proplist command. trans also has limited filtering options.
            trans command is used mainly in the output of createlinks command.

    createlinks:
        short: Create a batch file to maintains a folder of revision specifc folders ready to be uploaded by the up2s3 command.
        long: |
            Usage: instl createlinks --config_file config_file --out createlinks.sh [--run]
            For each revision of the svn repository, starting with the base revision, createlinks will checkout the revison from svn to a Base folder, and copy the files to a folder named after the revision. Copying is done using hard links and hense the name of the command. In addition createlinks will create info_map files describing the contents of the specific revision. A revision folder created succesfully will contain a stamp file, that will cause the folder to be skipped the next time creaetlinks is called.
            All information about the svn repository url, the location of the top level links folder, the base revision etc, is taken from the config file.
            relevant varaibles: REPO_NAME, SVN_REPO_URL, ROOT_LINKS_FOLDER, BASE_REPO_REV
            Keep in mind that createlinks command does not actaully do anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully create the links.

    up2s3:
        short: Create a batch file to upload revision specific folder created with the createlinks command.
        long: |
            Usage: instl up2s3 --config_file config_file --out up2s3.sh [--run]
            For each revision folder created with the crearelinks command, up2s3 will remove the files not belonging to the specific revision and upload the remaining files to s3. A revision folder uploaded succesfully will contain a stamp file, that will cause the folder to be skipped the next time up2s3 is called.
            All information about the the location of the top level links folder, the s3 url and s3 passwords, is taken from the config file.
            relevant varaibles: REPO_NAME, ROOT_LINKS_FOLDER, BASE_REPO_REV, S3_BUCKET_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
            Keep in mind that up2s3 command does not actaully do anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully create upload the links.

    up_repo_rev:
        short: Uplaod a file containing basic information about uploaded repository.
        long: |
            Usage: instl up_repo_rev --in repro_rev_file --config_file config_file
            The information in the uploaded repro_rev_file should be the repository name, main url, and base revision.
            All information about the s3 url and passwords, is taken from the config file.
            relevant varaibles: S3_BUCKET_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY

    fix_props:
        short: Create a batch file with commands to fix certine properties in svn repository.
        long: |
            Removes or adds svn:executable property where appropriate and removed all otehr properties.
            Keep in mind that fix_props command does not actaully do anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully fix the properties.

    fix_symlinks:
        short: Create a batch file with commands to replace symlinks with .symlink files.
        long: |
            Usage:instl fix_symlinks --folder folder_to_fix --out fix_symlinks.sh [--run] [--svn]
            Since s3 cannot deal with symlinks, symlinks should not be commited to svn. Instead the fix_symlinks command will replace each symlinks with file with the same name and the extension .symlink. The .symlink file will contain the relative path of the symlink.
            If the --svn flag is given, fix_symlinks will issue svn add/remove commands instead of removing the old symlink file. --svn flag given only if folder_to_fix is an svn checkout folder.
            Keep in mind that fix_symlinks command does not actaully do anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully fix the symlinks.

    stage2svn:
        short: Create a batch file with commands to update svn from a staging folder.
        long: |
            Usage: instl stage2svn --stage_folder staging-folder --svn_folder svn-folder --out stage2svn.sh [--run]
            Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly becasue svn finds it difficult to handle deleted files. The procedure is to checkout the latest version to one folder, export the revision to a second folder (the staging folder) and change the staging folder. When the staging folder is ready stage2svn can be called to create the svn command to add/delete files. Existing files that were changed will be discovered by svn iteslf. Before calling stage2svn it is advisable to call fix_symlinks, stage2svn will not accept new symlinks.
            Keep in mind that stage2svn command does not actaully do anything, unless the --run flag is given. You will need to run the producded batch file in order to actaully run the svn commands and then commit the changes to svn.

    version:
        short: Prints the instl version.
        long: |
            Usage: instl version

variable:
    SYNC_BASE_URL:
        short: url used as the prefix for creating the full url to download installation files
        long: SYNC_BASE_URLSYNC_BASE_URLSYNC_BASE_URL

    SYNC_TRAGET_OS_URL:
        short: url used as the prefix for creating the full url to download installation files for the targets operating system.
        long: SYNC_BASE_URLSYNC_BASE_URLSYNC_BASE_URL

option:
    in:
        short: -i, --in input_file.
        long: input_file is yaml file with variable and index definitions that configure what a command does. Typically the input_file will also contain __include__ statements to get further variable and index definitions from a remore or local file.
    out:
        short: -o, --out output_file. *option_in
        long: |
            output_file is a batch file created by instl with instructions that implement the command it was creaetd for, according to the input file given with the --in option.
            Specifing an output_file does not actaully run the file, unless the --run option is given.
    run:
        short: -r, --run
        long: |
            for commands the accept --out  option specifing --run will also run the out_put file.
