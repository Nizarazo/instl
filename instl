#!/usr/bin/env python2.7

""" main executable for instl """

from __future__ import print_function


import sys
import os
import argparse

# setup logging, must be done before other imports
from pyinstl.log_utils import setup_logging
setup_logging("instl", "instl")
from pyinstl.log_utils import func_log_wrapper
from pyinstl.utils import get_current_os_names

import pyinstl
from pyinstl.instlException import InstlFatalException, InstlException

current_os_names = get_current_os_names()
os_family_name = current_os_names[0]
os_second_name = current_os_names[0]
if len(current_os_names) > 1:
    os_second_name = current_os_names[1]

def get_path_to_instl_app():
    """
    @return: returns the path to this
    """
    application_path = None
    if getattr(sys, 'frozen', False):
        application_path = os.path.realpath(sys.executable)
    elif __file__:
        application_path = os.path.realpath(__file__)
    return application_path

def get_data_folder():
    data_folder = None
    if getattr(sys, 'frozen', False):
        data_folder = getattr(sys, '_MEIPASS', None)
    elif __file__:
        data_folder = os.path.dirname(os.path.realpath(__file__))
    return data_folder

class CommandLineOptions(object):
    """ namespace object to give to parse_args
        holds command line options
    """
    def __init__(self):
        self.command = None
        self.input_file = None
        self.output_file = None
        self.run = False
        self.state_file = None
        self.todo_args = None
        self.props_file = None
        self.filter_out = None
        self.filter_in = None
        self.repo_rev = None
        self.base_repo_rev = None
        self.config_file = None
        self.folder = None
        self.svn = None
        self.staging_folder = None
        self.svn_folder = None
        self.sh1_checksum = None
        self.rsa_signature = None

    def __str__(self):
        return "\n".join([''.join((n, ": ", str(v))) for n, v in sorted(vars(self).iteritems())])

def prepare_args_parser():
    """
    Prepare the parsers for command line arguments
    """
    def decent_convert_arg_line_to_args(self, arg_line):
        """ parse a file with options so that we do not have to write one sub-option
            per line.  Remove empty lines, comment lines, and end of line comments.
            ToDo: handle quotes
        """
        line_no_whitespace = arg_line.strip()
        if line_no_whitespace and line_no_whitespace[0] != '#':
            for arg in line_no_whitespace.split():
                if not arg:
                    continue
                elif  arg[0] == '#':
                    break
                yield arg

    parser = argparse.ArgumentParser(description='instl: cross platform svn based installer',
                    prefix_chars='-+',
                    fromfile_prefix_chars='@',
                    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    argparse.ArgumentParser.convert_arg_line_to_args = decent_convert_arg_line_to_args

    subparsers = parser.add_subparsers(dest='command', help='sub-command help')
    parser_sync = subparsers.add_parser('sync',
                                        help='sync files to be installed from server to temp folder')
    parser_copy = subparsers.add_parser('copy',
                                        help='copy files from temp folder to target paths')
    parser_synccopy = subparsers.add_parser('synccopy',
                                        help='sync files to be installed from server to temp \
                                        folder and copy files from temp folder to target paths')
    parser_trans = subparsers.add_parser('trans',
                                        help='translate svn map files from one format to another')
    parser_create_links = subparsers.add_parser('create-links',
                                        help='create links from the base SVN checkout folder for a specific version')
    parser_up2S3 = subparsers.add_parser('up2s3',
                                        help='upload installation sources to S3')
    parser_up_repo_rev = subparsers.add_parser('up-repo-rev',
                                        help='upload repository revision file to admin folder')
    parser_fix_props = subparsers.add_parser('fix-props',
                                        help='create svn commands to remove redundant properties such as executable bit from files that should not be marked executable')
    parser_fix_symlinks = subparsers.add_parser('fix-symlinks',
                                        help='replace symlinks with .symlinks files')
    parser_svn2stage = subparsers.add_parser('svn2stage',
                                        help='svn sync repository and copy to staging folder')
    parser_stage2svn = subparsers.add_parser('stage2svn',
                                        help='add/remove files in staging to svn sync repository')
    parser_wtar = subparsers.add_parser('wtar',
                                        help='create .wtar files from specified files and folders')
    parser_create_rsa_keys = subparsers.add_parser('create-rsa-keys',
                                        help='create private and public keys')
    parser_make_sig = subparsers.add_parser('make-sig',
                                        help='create sha1 checksum and rsa signature for a file')
    parser_check_sig = subparsers.add_parser('check-sig',
                                        help='check sha1 checksum and/or rsa signature for a file')
    parser_help = subparsers.add_parser('help')
    parser_version = subparsers.add_parser('version', help='display instl version')

    command_names = sorted(subparsers.choices.keys())

    modes = {'client': (parser_sync, parser_copy, parser_synccopy),
             'admin': (parser_trans, parser_create_links, parser_up2S3,
                       parser_up_repo_rev, parser_fix_props, parser_fix_symlinks,
                       parser_stage2svn, parser_svn2stage, parser_wtar,
                       parser_create_rsa_keys, parser_make_sig, parser_check_sig),
             'do_something': (parser_version, parser_help)
            }
    for the_mode, parsers in modes.iteritems():
        for some_parser in parsers:
            some_parser.set_defaults(mode=the_mode)

    need_input_options = (parser_sync, parser_copy, parser_synccopy,
                          parser_trans, parser_make_sig, parser_check_sig)
    need_output_options = (parser_copy, parser_sync, parser_synccopy,
                           parser_trans, parser_create_links, parser_fix_symlinks,
                           parser_up2S3, parser_fix_props, parser_stage2svn,
                           parser_svn2stage, parser_wtar)
    need_run_option = (parser_copy, parser_sync, parser_synccopy,
                           parser_create_links, parser_fix_symlinks,
                           parser_up2S3, parser_fix_props, parser_stage2svn)
    need_config_file_options = (parser_create_links, parser_up_repo_rev, parser_up2S3,
                                parser_fix_props, parser_stage2svn, parser_svn2stage,
                                parser_wtar, parser_create_rsa_keys, parser_make_sig, parser_check_sig)

    # add --in to parsers that need it
    for subparser in need_input_options:
        input_options = subparser.add_argument_group(description='input arguments:')
        input_options.add_argument('--in', '-i',
                                    required=True,
                                    nargs=1,
                                    metavar='path-to-input-file',
                                    dest='input_file',
                                    help="file to read index and definitions from")

    # add --out && --run to parsers that need it
    for subparser in need_output_options:
        output_options = subparser.add_argument_group(description='output arguments:')
        output_options.add_argument('--out', '-o',
                                    required=True,
                                    nargs=1,
                                    metavar='path-to-output-file',
                                    dest='output_file',
                                    help="out put file")
    for subparser in need_run_option:
        run_option = subparser.add_argument_group(description='run arguments:')
        run_option.add_argument('--run', '-r',
                                    required=False,
                                    default=False,
                                    action='store_true',
                                    dest='run',
                                    help="run the installation instructions script")

    # add --config-file to parsers that need it
    for subparser in need_config_file_options:
        config_file_options = subparser.add_argument_group(description='admin arguments:')
        config_file_options.add_argument('--config-file', '-s',
                                    required=True,
                                    nargs=1,
                                    metavar='path-to-config-file',
                                    dest='config_file',
                                    help="path to config-file")


    trans_options = parser_trans.add_argument_group(description='translate arguments:')
    trans_options.add_argument('--props', '-p',
                                required=False,
                                nargs=1,
                                metavar='path-to-props-file',
                                dest='props_file',
                                help="file to read svn properties from")
    trans_options.add_argument('--filter-out',
                                required=False,
                                nargs='+',
                                metavar='paths-to-filter-out',
                                dest='filter_out',
                                help="paths to filter out, comma separated")
    trans_options.add_argument('--filter-in',
                                required=False,
                                nargs=1,
                                metavar='version-to-filter-in',
                                dest='filter_in',
                                help="version to filter in, all other version will be left out")
    trans_options.add_argument('--base-repo-rev',
                                required=False,
                                nargs=1,
                                metavar='base-repo-rev',
                                dest='base_repo_rev',
                                help="minimal version, all version below will be changed to base-repo-rev")

    check_sig_options = parser_check_sig.add_argument_group(description='check sig arguments:')
    check_sig_options.add_argument('--sha1',
                                required=False,
                                nargs=1,
                                metavar='sh1-checksum',
                                dest='sh1_checksum',
                                help="expected sha1 checksum")
    check_sig_options.add_argument('--rsa',
                                required=False,
                                nargs=1,
                                metavar='rsa-sig',
                                dest='rsa_signature',
                                help="expected rsa SHA-512 signature")

    help_options = parser_help.add_argument_group(description='help subject:')
    help_options.add_argument('subject', nargs='?')

    if 'Win' not in current_os_names:
        symlink_options = parser_fix_symlinks.add_argument_group(description='fix-symlinks arguments:')
        symlink_options.add_argument('--folder', '-f',
                                required=True,
                                nargs=1,
                                metavar='folder-to-replace-symlinks-in',
                                dest='folder',
                                help="folder to replace symlinks in")
        symlink_options.add_argument('--svn', '-s',
                                required=False,
                                default=False,
                                action='store_true',
                                dest='svn',
                                help="issue svn command as well as file system commands")
    return parser, command_names

def read_command_line_options(name_space_obj, arglist=None):
    """ parse command line options """
    #args_str = "No options given"
    # todo: restore __COMMAND_LINE_OPTIONS__
    #if arglist is not None:
    #    logging.info("arglist: %s", " ".join(arglist))
    #self.cvl.add_const_config_variable('__COMMAND_LINE_OPTIONS__', "read only value", args_str)
    if not arglist or len(arglist) == 0:
        pass
        # No command line options given, but there maybe a "auto run" file with options
        #auto_run_file_path = None
        # todo: restore autorun file reading
        #auto_run_file_name = "auto_run_instl.yaml"
        #auto_run_file_path = self.path_searcher.find_file(auto_run_file_name)
        #if auto_run_file_path:
        #    arglist = ("@"+auto_run_file_path,)
        #    logging.info("found auto run file %s", auto_run_file_name)
    parser, command_names = prepare_args_parser()
    if arglist and len(arglist) > 0:
        # Command line options were given or auto run file was found
        parser.parse_args(arglist, namespace=name_space_obj)
    else:
        # No command line options were given
        name_space_obj.mode = "interactive"
    return command_names

@pyinstl.log_utils.func_log_wrapper
def main():
    """ Main instl entry point. Reads command line options and decides if to go into interactive or client mode.
    """
    try:
        initial_vars = {"__INSTL_EXE_PATH__": get_path_to_instl_app(),
                        "__INSTL_DATA_FOLDER__": get_data_folder()}
        options = CommandLineOptions()
        command_names = read_command_line_options(options, sys.argv[1:])
        initial_vars = {"__INSTL_EXE_PATH__": get_path_to_instl_app(),
                        "__INSTL_DATA_FOLDER__": get_data_folder(),
                        "__COMMAND_NAMES__": command_names}
        if options.mode == "client":
            from pyinstl.instlClient import InstlClient
            instance = InstlClient(initial_vars)
            instance.init_from_cmd_line_options(options)
            instance.do_command()
        elif options.mode == "admin":
            from pyinstl.instlAdmin import InstlAdmin
            instance = InstlAdmin(initial_vars)
            instance.init_from_cmd_line_options(options)
            instance.do_command()
        elif options.mode == "interactive":
            from pyinstl.instlClient import InstlClient
            client = InstlClient(initial_vars)
            client.init_from_cmd_line_options(options)
            from pyinstl.instlAdmin import InstlAdmin
            from pyinstl.instlInstanceBase_interactive import go_interactive
            admin = InstlAdmin(initial_vars)
            admin.init_from_cmd_line_options(options)
            go_interactive(client, admin)
        elif options.mode == "do_something":
            from pyinstl.instlMisc import InstlMisc
            instance = InstlMisc(initial_vars)
            instance.init_from_cmd_line_options(options)
            instance.do_command()
        else:
            raise InstlException("incomprehensible command line options:\n", options)
    except InstlException as instl_except:
        #print("instl exception", instl_except.message)
        raise
    except InstlFatalException as instl_except:
        #print("instl exception", instl_except.message)
        raise
    except Exception:
        raise

if __name__ == "__main__":
    main()
