#!/usr/local/bin/python2.7

from __future__ import print_function # 123

import sys
import os
import logging
import logging.handlers
import pyinstl

import platform
current_os = platform.system()
if current_os == 'Darwin':
    current_os = 'Mac'
    from pyinstl.instlInstance_mac import InstlInstance_mac as ii
elif current_os == 'Windows':
    current_os = 'Win'
    from pyinstl.instlInstance_win import InstlInstance_win as ii

def main():
    try:
        setup_logging()
        logging.info("instl BEGIN")
        instance = ii()
        instance.read_command_line_options(sys.argv[1:])
        if instance.mode == "batch":
            instance.do_command_batch_mode()
        elif instance.mode == "interactive":
            instance.do_da_interactive()
        elif instance.mode == "do_something":
            instance.do_something()
        logging.info("instl END")
    except Exception as es:
        import traceback
        tb = traceback.format_exc()
        print(tb)
        #print("__main__", es)

def setup_logging():
    my_logger = logging.getLogger()
    log_path = ii.get_log_file_path()
    debug_level_indicator = log_path+".debug"
    if os.path.isfile(debug_level_indicator):
        my_logger.setLevel(logging.DEBUG)
    else:
        my_logger.setLevel(logging.INFO)
    rotatingHandler = logging.handlers.RotatingFileHandler(log_path, maxBytes=200000, backupCount=5)
    formatter = logging.Formatter('%(asctime)s, %(levelname)s, %(funcName)s: %(message)s')
    rotatingHandler.setFormatter(formatter)
    my_logger.addHandler(rotatingHandler)

if __name__ == "__main__":
    main()
