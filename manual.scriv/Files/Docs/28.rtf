{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
\deftab720
\pard\pardeftab720\pardirnatural

\f0\fs32 \cf0 \
        \
        fix-symlinks:\
        short: Replace symlinks with .symlink files. (admin command)\
        long: |\
            Usage:instl fix-symlinks  --config-file path_to_config_file --out path-to-output-file [--run]\
            Since s3 cannot deal with symlinks, symlinks should not be committed to svn. Instead the fix-symlinks command will replace each symlinks with file with the same name and the extension .symlink. The .symlink file will contain the relative path of the symlink.\
            The folder where symlinks will be fixed is specifies in STAGING_FOLDER variable in path_to_config_file.\
            Keep in mind that fix-symlinks command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the symlinks.\
\
    help:\
        short: display help text about command, variable or command line option.\
        long: |\
            Usage:\
                instl help <variable>\
                instl help <command>\
                instl help <option>\
                instl help defaults\
\
    make-sig:\
        short: Create RSA signature and sha1 checksum for a file. (admin command)\
        long: |\
            Usage: instl make-sig --in file_to_sig --config-file path_to_config_file\
            RSA signature is created using the private key (variable: PRIVATE_KEY) supplied in the config file.\
            make-sig is a utility command, it is not needed for creating or using instl-based installer.\
\
    parallel-run:\
        short: Run processes in parallel.\
        long: |\
            Usage: instl parallel-run --in list-of-processes-to-run\
            parallel-run will read the list-of-processes-to-run file and will launch a process running the command in each line . It will return when all processes have finished or when any process returns non zero value.\
            parallel-run command is used in the batch file created by the sync or synccopy commands.\
\
    remove:\
      short: Remove installed files.\
      long: |\
            Usage: instl remove --in instl-config-yaml-file --out remove.sh [--run]\
            instl's remove command will create a batch file containing instructions to remove files from their designated locations on disk. Said files were previously copied using the copy command. Definition of what to remove from which destination is taken from the instl-config-yaml-file. Default remove action for installed item is to erase the files from disk, but oother instructions can be given in the instl-config-yaml-file.\
            Keep in mind that remove command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually remove the files.\
\
    set-exec:\
        short:\
        long: |\
            Usage: instl set-exec --in path-to-input-file [--start-progress start-progress-number] [--total-progress total-progress-number]\
            Sets the executable bit for files marked as such in path-to-input-file. Paths are relative to current directory.\
            set-exec command is used in the batch file created by the copy or synccopy commands.\
\
    stage2svn:\
        short: Update svn from a staging folder. (admin command)\
        long: |\
           Usage: instl stage2svn --config-file  path-to-config-file --out stage2svn.sh [--run]\
           Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files. \
           When the staging folder (created by the svn2stage command) is ready, stage2svn can be called to create the svn command to add/delete files. Existing files that were changed will be discovered by svn itself. Before calling stage2svn it is advisable to call fix-symlinks, stage2svn will not accept new symlinks.\
           Keep in mind that stage2svn command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually run the svn commands and then manually commit the changes to svn.\
\
    svn2stage:\
        short: Create a fresh staging folder by checking out the latest svn revision and copying the files to the staging folder. (admin command)\
        long: |\
            Usage: instl svn2stage --config-file config-file --out svn2stage.sh [--run]\
            Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files. svn2stage will checkout the latest revision to the svn folder (variable: SVN_CHECKOUT_FOLDER), and export the revision's files to the staging folder (variable: STAGING_FOLDER). Now changes to the staging folder can be made. When the staging folder is ready, stage2svn can be called to create the svn command to add/delete files\
            Keep in mind that svn2stage command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually run the svn and copy commands.\
\
    sync:\
      short: Download files.\
      long: |\
            Usage: instl sync --in instl-config-yaml-file --out sync.sh [--run]\
            instl's sync command will create a batch file containing instructions to download required files. Said files can be later copied to their final destination using the copy command. Definition of what to sync from what url is taken from the instl-config-yaml-file.\
            Keep in mind that sync command does not actually download anything, unless the --run flag is given. You will need to run the produced batch file in order to actually download the files.\
\
    synccopy:\
        short: Download files and copy them to their destination.\
        long: |\
            Usage: instl synccopy --in instl-config-yaml-file --out synccopy.sh [--run]\
            instl's synccopy combines the actions of the sync and copy commands. The created batch file will download the required files and copy them to the designated locations on disk. Definition of what to sync from what url and what to copy to which destination is taken from the instl-config-yaml-file\
            Keep in mind that synccopy command does not actually download or copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually download and install the files.\
\
    trans:\
        short: Translates between the various format of svn info files. (admin command)\
        long:  |\
            Usage: instl trans --in svn_info_file [--props svn_props_file] [--filter-out path_to_filter_out [, path_to_filter_out] ] [--filter-in version_to_filter_in]\
            instl's trans command can translate between the format created by svn info command and the native instl info format. Additional input that can be given is the output of the svn proplist command. trans also has limited filtering options.\
            trans command is used in the output of create-links command.\
\
    unwtar:\
        short: Combines split wtar files and uncompresses wtar files.\
        long: |\
            Usage: instl unwtar\
            Walks the current directory recursively and looks for .wtar files. Files who's extension is in the format '*.wtar.aa' are split files and are combined to a .wtar file. If combination is successful a '.wtar.aa.done' file is created, this will prevent subsequent runs of unwtar from combining the files again.\
            Files who's extension is in the format '*.wtar' are untared to their directory. If untarring is successful a '.wtar.done' file is created, this will prevent subsequent runs of unwtar from untarring the files again.\
            unwtar command is used in the batch file created by the sync or synccopy commands.\
\
    up-repo-rev:\
        short: Upload a file containing basic information about uploaded repository. (admin command)\
        long: |\
            Usage: instl up-repo-rev --config-file config_file\
            up-repo-rev will create a repo_rev file according to the information in the config file, and upload said repo_rev file to s3 bucket to a top level folder called 'admin'. The contents of the repo_rev file are a list of variables defined in the "REPO_REV_FILE_VARS" variable of the config file. Typically these variables would be: REPO_REV, REPO_TYPE, SYNC_BASE_URL.\
            relevant variables:\
                S3_BUCKET_NAME\
                REPO_REV_FILE_NAME, REPO_REV_FILE_VARS, REPO_TYPE, REPO_REV, REPO_NAME\
\
    up2s3:\
        short: Upload revision specific folders created with the create-links command. (admin command)\
        long: |\
            Usage: instl up2s3 --config-file config_file --out up2s3.sh [--run]\
            For each revision folder created with the create-links command, up2s3 will remove the files not belonging to the specific revision and upload the remaining files to s3. A revision folder uploaded successfully will contain a stamp file, that will cause the folder to be skipped the next time up2s3 is called.\
            All information about the the location of the top level links folder, the s3 url and s3 passwords, is taken from the config file.\
            relevant variables: REPO_NAME, ROOT_LINKS_FOLDER_REPO, BASE_REPO_REV, S3_BUCKET_NAME\
            Keep in mind that up2s3 command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually create upload the links.\
\
    verify-index:\
        short: Reads an index file and report discrepancies. (admin command)\
        long: |\
            Usage: instl verify-index --in path-to-input-file\
            path-to-input-file is a instl yaml file, verify-index will check it's index parts for missing sources, dependency and inheritance cycles.\
    \
    version:\
        short: Prints the instl version.\
        long: |\
            Usage: instl version\
    \
    wtar:\
        short: Compress files and folder to a .wtar file. (admin command)\
        long: |\
            Files to compress are decided according to a regex given in the config file (variable: WTAR_REGEX).\
\
variable:\
    SYNC_BASE_URL:\
        short: url used as the prefix for creating the full url to download installation files\
        long: SYNC_BASE_URLSYNC_BASE_URLSYNC_BASE_URL\
\
option:\
    in:\
        short: -i, --in input_file.\
        long: input_file is yaml file with variable and index definitions that configure what a command does. Typically the input_file will also contain __include__ statements to get further variable and index definitions from a remore or local file.\
    out:\
        short: -o, --out output_file. *option_in\
        long: |\
            output_file is a batch file created by instl with instructions that implement the command it was created for, according to the input file given with the --in option.\
            Specifying an output_file does not actually run the file, unless the --run option is given.\
    run:\
        short: -r, --run\
        long: |\
            for commands the accept --out  option Specifying --run will also run the out_put file.\
}