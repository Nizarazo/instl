command:
    check-checksum:
        short: Check synced files against their expected sha1 checksum. (runtime command)
        long: |
            Usage: instl check-checksum --in path-to-input-file [--start-progress start-progress-number] [--total-progress total-progress-number]
            check-checksum will calculate the sha1 checksum of each file listed in path-to-input-file and compare this checksum against the expected checksum listed in path-to-input-file.
            path-to-input-file should be a path to a file in info_map.txt format containing a list of the files to check. All file paths listed in path-to-input-file are relative to the current directory.
            A list of non matching or missing files is printed at the end.
            Non zero exit code is returned if any file in path-to-input-file is missing or has non matching checksum.
            check-checksum command is used in the batch created by the sync or synccopy commands and path-to-input-file would be bookkeeping/to_sync_info_map.txt.
            If --start-progress and --total-progress options are given, check-checksum will output progress messages starting with the number given in --start-progress with a total given in total-progress. Progress message for action N would be:
            Progress start-progress-number+N of total-progress;

    check-sig:
        short: Check file against it's RSA signature and expected sha1 checksum. (runtime command)
        long: |
            Usage: instl check-sig --in file_to_check --config-file path_to_config_file [--sha1 expected_sha1_checksum] [--rsa rsa_signature]
            file_to_check is the file for which RSA signature and/or sha1 checksum will be checked.
            path_to_config_file is a YAML configuration file with relevant variables.
            If --rsa option is given, check-sig will verify the signature agains the file using the public key (variable: PUBLIC_KEY) supplied in the config file.
            If --sha2 option is given check-sig will calculate the file's sha1 checksum and compare the result to the given checksum.
            check-sig is a utility command, it is not needed for creating or using instl-based installer.

    copy:
      short: Install files to their destination. (client command)
      long: |
            Usage: instl copy --in instl-config-yaml-file --out copy.sh [--run]
            instl's copy command will create a batch file containing instructions to copy files to their designated locations on disk. Said files were previously downloaded using the sync command. Definition of what to copy to which destination is taken from the instl-config-yaml-file.
            Keep in mind that copy command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually install the files.

    create-folders:
        short: Create folders in preparation for sync. (runtime command)
        long: |
            Usage: instl create-folders --in path-to-input-file [--start-progress start-progress-number] [--total-progress total-progress-number]
            For each item marked as folder in path-to-input-file create-folders will create the folder relative to the current directory.
            path-to-input-file should be a path to a file in info_map.txt format containing a list of the folders to check.
            create-folders command is used in the batch created by the sync or synccopy commands and path-to-input-file would be bookkeeping/to_sync_info_map.txt.
            If --start-progress and --total-progress options are given, check-checksum will output progress messages starting with the number given in --start-progress with a total given in total-progress. Progress message for action N would be:
            Progress start-progress-number+N of total-progress;

    create-links:
        short: Maintains a folder of revision specific folders ready to be uploaded by the up2s3 command. (admin command)
        long: |
            Usage: instl create-links --config-file config_file --out create-links.sh [--all-revisions] [--run]
            For each revision of the svn repository, starting with the base revision, create-links will checkout the revision from svn to a Base folder, and copy the files to a folder named after the revision. Copying is done using hard links and hence the name of the command. In addition create-links will create info_map files describing the contents of the specific revision. A revision folder created successfully will contain a stamp file, that will cause the folder to be skipped the next time create-links is called.
            All information about the svn repository url, the location of the top level links folder, the base revision etc, is taken from the config file.
            relevant variables: REPO_NAME, SVN_REPO_URL, ROOT_LINKS_FOLDER_REPO, BASE_REPO_REV
            if --all-revisions option is given create-links will work on all revisions in the svn reporsitory starting with BASE_REPO_REV. Otherwise only revisions upto REPO_REV will be considered.
            Keep in mind that create-links command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually create the links.

    create-repo-rev-file:
        short: creates a file containing basic information about a specific revision. (admin command)
        long: |
            The created file can be uploaded to s3 once the specific revision is ready for distribution, using up-repo-rev command.
            The variables in the created file are specified in REPO_REV_FILE_VARS variable.
            This command is intended to be called by the create-links command.

    create-rsa-keys:
        short: Create private and public RSA keys. (admin command)
        long: |
            Usage: instl create-rsa-keys --config-file path_to_config_file.
            Private key is written to a file named in variable PRIVATE_KEY_FILE which defaults to "$(REPO_NAME).private_key".
            Public key is written to a file named in variable PUBLIC_KEY_FILE which defaults to "$(REPO_NAME).public_key".
            Variables PRIVATE_KEY_FILE, PUBLIC_KEY_FILE, REPO_NAME are read from path_to_config_file.
            Key size is 4096. Keys are produced in PEM format. 
    depend:
        short: Create a full dependencies list from index.yaml (admin command)
        long: |
            Usage instl depend --in index-file --out depend-file
            Reads the given index-file and for each IID prints to depend-file all the IID it depends on and all IID needed by it.
            To print to standard out specify --out stdout

    fix-perm:
        short: Fix unix style permissions (admin command)
        long: |
            Usage: instl fix-perm --config-file path_to_config_file --out path-to-output-file [--limit sub-folder, [sub-folder]] [--run]
            Fixes unix style permisions in the stage folder (variable STAGING_FOLDER) (or in subset thereof if --limit option is suplied). First, files that match the regex in variable EXEC_PROP_REGEX are made executbles (chmod a+x), all other files are made non-executbale (chmod a-x). Second, all file and folders are made read/write and the executable bit (if any) is extended for all files and folders, by running the command 'chmod a+rw,+X'. This command should be used before the wtar command so that files and folders being wtarred will have the correct permisions.
            fix-perm will output a list of files who's executable bit is about to change. Be sure to go over the list and check that the proposed changes are acceptable before running the batch file.
            Keep in mind that fix-perm command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the permissions.

    fix-props:
        short: Fix certain properties in svn repository. (admin command)
        long: |
            Usage: instl fix-props --out path-to-output-file --config-file path-to-config-file [--run]
            Removes or adds svn:executable property where appropriate and removes all other properties. Files are assumed to be executables if their path matchs the regexs specified in variable EXEC_PROP_REGEX. The path to SVN repository is taken from the SVN_CHECKOUT_FOLDER variable.
            Keep in mind that fix-props command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the properties. Also, running the batch file does not commit the properties changes, this should be manually done, after proper inspection, with an SVM client software.

    fix-symlinks:
        short: Replace symlinks with .symlink files. (admin command)
        long: |
            Usage:instl fix-symlinks  --config-file path_to_config_file --out path-to-output-file [--run]
            Since s3 cannot deal with symlinks, symlinks should not be committed to svn. Instead the fix-symlinks command will replace each symlinks with file with the same name and the extension .symlink. The .symlink file will contain the relative path of the symlink.
            The folder where symlinks will be fixed is specifies in STAGING_FOLDER variable in path_to_config_file.
            Keep in mind that fix-symlinks command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the symlinks.

    help:
        short: display help text about command, variable or command line option.
        long: |
            Usage:
                instl help <variable>
                instl help <command>
                instl help <option>
                instl help defaults

    make-sig:
        short: Create RSA signature and sha1 checksum for a file. (admin command)
        long: |
            Usage: instl make-sig --in file_to_sig --config-file path_to_config_file
            RSA signature is created using the private key (variable: PRIVATE_KEY) supplied in the config file.
            make-sig is a utility command, it is not needed for creating or using instl-based installer.

    parallel-run:
        short: Run processes in parallel. (runtime command)
        long: |
            Usage: instl parallel-run --in list-of-processes-to-run
            parallel-run will read the list-of-processes-to-run file and will launch a process running the command in each line . It will return when all processes have finished or when any process returns non zero value.
            parallel-run command is used in the batch file created by the sync or synccopy commands.

    remove:
      short: Remove installed files and all their dependencies. (client command)
      long: |
            Usage: instl remove --in instl-config-yaml-file --out remove.sh [--run]
            instl's remove command will create a batch file containing instructions to remove files from their designated locations on disk. Said files were previously copied using the copy command. Definition of what items to remove from which destination is taken from the instl-config-yaml-file. Default remove action for installed item is to erase the files from disk, but other instructions can be given in the instl-config-yaml-file. All items and their dependecies are removed without considering if other items might depend on the removed items.
            Keep in mind that remove command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually remove the files.

    set-exec:
        short: Sets the executable bit for certine files. (runtime command)
        long: |
            Usage: instl set-exec --in path-to-input-file [--start-progress start-progress-number] [--total-progress total-progress-number]
            Sets the executable bit for files marked as such in path-to-input-file. Paths are relative to current directory.
            set-exec command is used in the batch file created by the copy or synccopy commands.

    stage2svn:
        short: Update svn from a staging folder. (admin command)
        long: |
           Usage: instl stage2svn --config-file  path-to-config-file --out stage2svn.sh [--run]
           Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files. 
           When the staging folder (created by the svn2stage command) is ready, stage2svn can be called to create the svn command to add/delete files. Existing files that were changed will be discovered by svn itself. Before calling stage2svn it is advisable to call fix-symlinks, stage2svn will not accept new symlinks.
           Keep in mind that stage2svn command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually run the svn commands and then manually commit the changes to svn.

    svn2stage:
        short: Refresh staging folder by checking out the latest svn revision and copying the files to staging folder. (admin command)
        long: |
            Usage: instl svn2stage --config-file config-file --out svn2stage.sh [--run]
            Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files. svn2stage will checkout the latest revision to the svn folder (variable: SVN_CHECKOUT_FOLDER), and export the revision's files to the staging folder (variable: STAGING_FOLDER). Now changes to the staging folder can be made. When the staging folder is ready, stage2svn can be called to create the svn command to add/delete files
            Keep in mind that svn2stage command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually run the svn and copy commands.

    sync:
      short: Download files. (client command)
      long: |
            Usage: instl sync --in instl-config-yaml-file --out sync.sh [--run]
            instl's sync command will create a batch file containing instructions to download required files. Said files can be later copied to their final destination using the copy command. Definition of what to sync from what url is taken from the instl-config-yaml-file.
            Keep in mind that sync command does not actually download anything, unless the --run flag is given. You will need to run the produced batch file in order to actually download the files.

    synccopy:
        short: Download files and copy them to their destination. (client command)
        long: |
            Usage: instl synccopy --in instl-config-yaml-file --out synccopy.sh [--run]
            instl's synccopy combines the actions of the sync and copy commands. The created batch file will download the required files and copy them to the designated locations on disk. Definition of what to sync from what url and what to copy to which destination is taken from the instl-config-yaml-file
            Keep in mind that synccopy command does not actually download or copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually download and install the files.

    trans:
        short: Translates between the various format of svn info files. (admin command)
        long:  |
            Usage: instl trans --in svn_info_file [--props svn_props_file] [--filter-out path_to_filter_out [, path_to_filter_out] ] [--filter-in version_to_filter_in]
            instl's trans command can translate between the format created by svn info command and the native instl info format. Additional input that can be given is the output of the svn proplist command. trans also has limited filtering options.
            trans command is used in the output of create-links command.

    translate_url:
        short: Translates to canonical form according to the current connection. (misc command)
        long:  |
            Usage: instl translate_url --in url_to_translate [--credentials s3:ACCESS_KEY:SECRET_KEY:BUCKET]
            instl's translate_url translate a url so it can be passed to a browser or download utility such as curl.
            If no --credentials is given, the translation will simply replace characters to ascii and spaces to %20.
            If --credentials is given instl will connect and build a url suitable for use. Currently only Amazon s3 connection is supported.

    test-import:
        short: Test that python imports inside instl are successful.. (misc command)
        long:   |
            Usage: instl test-import
            Helps making sure instl will function OK by trying out various import statements that instl uses. Especially useful after compiling instl in making sure the compiled binrary can find all the necessary imports.
            If all imports are OK, no message is written to stdout (except command timing statistics) and exit code is 0. In case of error a list of missing modules is printed and non-zero exit code is returned.

    uninstall:
      short: Remove installed files considering dependencies. (client command)
      long: |
            Usage: instl uninstall --in instl-config-yaml-file --out uninstall.sh [--run]
            instl's uninstall command will create a batch file containing instructions to remove files from their designated locations on disk. Said files were previously copied using the copy command. Definition of what items to remove from which destination is taken from the instl-config-yaml-file. Default uninstall action for installed item is to erase the files from disk, but other instructions can be given in the instl-config-yaml-file. Items and their dependecies are removed only if they are not needed by other items that remain installed.
            Keep in mind that uninstall command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually uninstall the files.

    unwtar:
        short: Combines split wtar files and uncompresses wtar files. (runtime command)
        long: |
            Usage: instl unwtar [--in file-or-folder] [--no-artifacts]
            Files who's extension is in the format '*.wtar.aa' are split files and are combined to a single .wtar file. If combination is successful a '.wtar.aa.done' file is created, this will prevent subsequent runs of unwtar from combining the files again.
            Files who's extension is in the format '*.wtar' are untared to their directory. If untarring is successful a '.wtar.done' file is created, this will prevent subsequent runs of unwtar from untarring the files again.
            If --no-artifacts option is given in all .wtar.??, .wtar and .done files are removed.
            If --in option is given, unwtar acts on the given file or folder, otherwise it will work on the currect direcotry. Working on direcotries is recursive.
            unwtar command is used in the batch file created by the sync or synccopy commands.

    up-repo-rev:
        short: Upload a file containing basic information about uploaded repository. (admin command)
        long: |
            Usage: instl up-repo-rev --config-file config_file
            up-repo-rev will create a repo_rev file according to the information in the config file, and upload said repo_rev file to s3 bucket to a top level folder called 'admin'. The contents of the repo_rev file are a list of variables defined in the "REPO_REV_FILE_VARS" variable of the config file. Typically these variables would be: REPO_REV, REPO_TYPE, SYNC_BASE_URL.
            relevant variables:
                S3_BUCKET_NAME
                REPO_REV_FILE_NAME, REPO_REV_FILE_VARS, REPO_TYPE, REPO_REV, REPO_NAME

    up2s3:
        short: Upload revision specific folders created with the create-links command. (admin command)
        long: |
            Usage: instl up2s3 --config-file config_file --out up2s3.sh  [--all-revisions] [--run]
            For each revision folder created with the create-links command, up2s3 will remove the files not belonging to the specific revision and upload the remaining files to s3. A revision folder uploaded successfully will contain a stamp file, that will cause the folder to be skipped the next time up2s3 is called.
            All information about the the location of the top level links folder, the s3 url and s3 passwords, is taken from the config file.
            relevant variables: REPO_NAME, ROOT_LINKS_FOLDER_REPO, BASE_REPO_REV, S3_BUCKET_NAME
            if --all-revisions option is given up2s3 will work on all revisions in the svn reporsitory starting with BASE_REPO_REV. Otherwise only revisions upto REPO_REV will be considered.
            Keep in mind that up2s3 command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually create upload the links.

    verify-index:
        short: Reads an index file and report discrepancies. (admin command)
        long: |
            Usage: instl verify-index --in path-to-input-file
            path-to-input-file is a instl yaml file, verify-index will check it's index parts for missing sources, dependency and inheritance cycles.

    verify-repo:
        short: Scans the stage folder and the index file and report discrepancies. (admin command)
        long: |
            Usage: instl verify-index --config-file config_file
            Report any sources specified in index.yaml that are missing from the file system using the folder in variable STAGING_FOLDER.
            Also check and reposrt dependency and inheritance cycles.
            Used to check repossitory consistancy before running stage2svn.

    version:
        short: Prints the instl version.
        long: |
            Usage: instl version

    win-shortcut:
      short: Creates a Windows shortcut. (runtime command)
      long: |
        Usage: instl win-shortcut --shortcut in-path-to-shortcut --target in-path-to-target
        Creates a windows shortcut in the path specified by in-path-to-shortcut. in-path-to-shortcut must end with .lnk.
        in-path-to-target is what the shortcut will lead to. The "Starts in" section of the shortcut is set to the parent folder of in-path-to-target.

    wtar:
        short: Compress files and folder to a .wtar file. (admin command)
        long: |
            Files to compress are decided according to a regex given in the config file (variable: WTAR_REGEX).

variable:
    SYNC_BASE_URL:
        short: url used as the prefix for creating the full url to download installation files
        long: SYNC_BASE_URLSYNC_BASE_URLSYNC_BASE_URL

option:
    in:
        short: -i, --in input_file.
        long: input_file is yaml file with variable and index definitions that configure what a command does. Typically the input_file will also contain __include__ statements to get further variable and index definitions from a remore or local file.
    out:
        short: -o, --out output_file. *option_in
        long: |
            output_file is a batch file created by instl with instructions that implement the command it was created for, according to the input file given with the --in option.
            Specifying an output_file does not actually run the file, unless the --run option is given.
    run:
        short: -r, --run
        long: |
            for commands the accept --out  option Specifying --run will also run the out_put file.
